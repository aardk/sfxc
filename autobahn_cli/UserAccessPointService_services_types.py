################################################## 
# UserAccessPointService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# useraccesspoint.jra3.geant2.net
##############################

class ns0:
    targetNamespace = "useraccesspoint.jra3.geant2.net"

    class ReservationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "useraccesspoint.jra3.geant2.net"
        type = (schema, "ReservationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReservationResponse_Def.schema
            TClist = [ZSI.TC.String(pname="bodID", aname="_bodID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://useraccesspoint.jra3.geant2.net/","state",lazy=False)(pname="state", aname="_state", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startPort", aname="_startPort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="endPort", aname="_endPort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startTime", aname="_startTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="endTime", aname="_endTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://useraccesspoint.jra3.geant2.net/","priority",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="capacity", aname="_capacity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="maxDelay", aname="_maxDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://useraccesspoint.jra3.geant2.net/","resiliency",lazy=False)(pname="resiliency", aname="_resiliency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bidirectional", aname="_bidirectional", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bodID = None
                    self._state = None
                    self._message = None
                    self._startPort = None
                    self._endPort = None
                    self._startTime = None
                    self._endTime = None
                    self._priority = None
                    self._description = None
                    self._capacity = None
                    self._maxDelay = None
                    self._resiliency = None
                    self._bidirectional = None
                    return
            Holder.__name__ = "ReservationResponse_Holder"
            self.pyclass = Holder

    class ModifyRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "useraccesspoint.jra3.geant2.net"
        type = (schema, "ModifyRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ModifyRequest_Def.schema
            TClist = [ZSI.TC.String(pname="resId", aname="_resId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startTime", aname="_startTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="endTime", aname="_endTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resId = None
                    self._startTime = None
                    self._endTime = None
                    return
            Holder.__name__ = "ModifyRequest_Holder"
            self.pyclass = Holder

    class ServiceResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "useraccesspoint.jra3.geant2.net"
        type = (schema, "ServiceResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ServiceResponse_Def.schema
            TClist = [ZSI.TC.String(pname="userName", aname="_userName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userHomeDomain", aname="_userHomeDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userEmail", aname="_userEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("useraccesspoint.jra3.geant2.net","ReservationResponse",lazy=False)(pname="reservations", aname="_reservations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userName = None
                    self._userHomeDomain = None
                    self._userEmail = None
                    self._reservations = []
                    return
            Holder.__name__ = "ServiceResponse_Holder"
            self.pyclass = Holder

    class ReservationRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "useraccesspoint.jra3.geant2.net"
        type = (schema, "ReservationRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ReservationRequest_Def.schema
            TClist = [ZSI.TC.String(pname="startPort", aname="_startPort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="endPort", aname="_endPort", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="startTime", aname="_startTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname="endTime", aname="_endTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://useraccesspoint.jra3.geant2.net/","priority",lazy=False)(pname="priority", aname="_priority", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="capacity", aname="_capacity", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="maxDelay", aname="_maxDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://useraccesspoint.jra3.geant2.net/","resiliency",lazy=False)(pname="resiliency", aname="_resiliency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bidirectional", aname="_bidirectional", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="processNow", aname="_processNow", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startPort = None
                    self._endPort = None
                    self._startTime = None
                    self._endTime = None
                    self._priority = None
                    self._description = None
                    self._capacity = None
                    self._maxDelay = None
                    self._resiliency = None
                    self._bidirectional = None
                    self._processNow = None
                    return
            Holder.__name__ = "ReservationRequest_Holder"
            self.pyclass = Holder

    class ServiceRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "useraccesspoint.jra3.geant2.net"
        type = (schema, "ServiceRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ServiceRequest_Def.schema
            TClist = [ZSI.TC.String(pname="userName", aname="_userName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userHomeDomain", aname="_userHomeDomain", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userEmail", aname="_userEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="justification", aname="_justification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("useraccesspoint.jra3.geant2.net","ReservationRequest",lazy=False)(pname="reservations", aname="_reservations", minOccurs=1, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userName = None
                    self._userHomeDomain = None
                    self._userEmail = None
                    self._justification = None
                    self._reservations = []
                    return
            Holder.__name__ = "ServiceRequest_Holder"
            self.pyclass = Holder

# end class ns0 (tns: useraccesspoint.jra3.geant2.net)

##############################
# targetNamespace
# http://useraccesspoint.jra3.geant2.net/
##############################

class ns1:
    targetNamespace = "http://useraccesspoint.jra3.geant2.net/"

    class state_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "state")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class priority_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "priority")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class resiliency_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "resiliency")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UserAccessPointException_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "UserAccessPointException")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.UserAccessPointException_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "UserAccessPointException_Holder"
            self.pyclass = Holder

    class getDomainClientPorts_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "getDomainClientPorts")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getDomainClientPorts_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getDomainClientPorts_Holder"
            self.pyclass = Holder

    class getDomainClientPortsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "getDomainClientPortsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getDomainClientPortsResponse_Def.schema
            TClist = [ZSI.TC.String(pname="Ports", aname="_Ports", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Ports = []
                    return
            Holder.__name__ = "getDomainClientPortsResponse_Holder"
            self.pyclass = Holder

    class submitService_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "submitService")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.submitService_Def.schema
            TClist = [GTD("useraccesspoint.jra3.geant2.net","ServiceRequest",lazy=False)(pname="request", aname="_request", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "submitService_Holder"
            self.pyclass = Holder

    class submitServiceResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "submitServiceResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.submitServiceResponse_Def.schema
            TClist = [ZSI.TC.String(pname="serviceID", aname="_serviceID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serviceID = None
                    return
            Holder.__name__ = "submitServiceResponse_Holder"
            self.pyclass = Holder

    class modifyReservation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "modifyReservation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.modifyReservation_Def.schema
            TClist = [GTD("useraccesspoint.jra3.geant2.net","ModifyRequest",lazy=False)(pname="request", aname="_request", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._request = None
                    return
            Holder.__name__ = "modifyReservation_Holder"
            self.pyclass = Holder

    class modifyReservationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "modifyReservationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.modifyReservationResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "modifyReservationResponse_Holder"
            self.pyclass = Holder

    class getAllClientPorts_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "getAllClientPorts")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getAllClientPorts_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getAllClientPorts_Holder"
            self.pyclass = Holder

    class getAllClientPortsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "getAllClientPortsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getAllClientPortsResponse_Def.schema
            TClist = [ZSI.TC.String(pname="Ports", aname="_Ports", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Ports = []
                    return
            Holder.__name__ = "getAllClientPortsResponse_Holder"
            self.pyclass = Holder

    class cancelService_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "cancelService")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.cancelService_Def.schema
            TClist = [ZSI.TC.String(pname="serviceID", aname="_serviceID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serviceID = None
                    return
            Holder.__name__ = "cancelService_Holder"
            self.pyclass = Holder

    class cancelServiceResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "cancelServiceResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.cancelServiceResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "cancelServiceResponse_Holder"
            self.pyclass = Holder

    class queryService_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "queryService")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.queryService_Def.schema
            TClist = [ZSI.TC.String(pname="serviceID", aname="_serviceID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._serviceID = None
                    return
            Holder.__name__ = "queryService_Holder"
            self.pyclass = Holder

    class queryServiceResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://useraccesspoint.jra3.geant2.net/"
        type = (schema, "queryServiceResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.queryServiceResponse_Def.schema
            TClist = [GTD("useraccesspoint.jra3.geant2.net","ServiceResponse",lazy=False)(pname="ServiceResponse", aname="_ServiceResponse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ServiceResponse = None
                    return
            Holder.__name__ = "queryServiceResponse_Holder"
            self.pyclass = Holder

    class UserAccessPointException_Dec(ElementDeclaration):
        literal = "UserAccessPointException"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","UserAccessPointException")
            kw["aname"] = "_UserAccessPointException"
            if ns1.UserAccessPointException_Def not in ns1.UserAccessPointException_Dec.__bases__:
                bases = list(ns1.UserAccessPointException_Dec.__bases__)
                bases.insert(0, ns1.UserAccessPointException_Def)
                ns1.UserAccessPointException_Dec.__bases__ = tuple(bases)

            ns1.UserAccessPointException_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "UserAccessPointException_Dec_Holder"

    class getDomainClientPorts_Dec(ElementDeclaration):
        literal = "getDomainClientPorts"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","getDomainClientPorts")
            kw["aname"] = "_getDomainClientPorts"
            if ns1.getDomainClientPorts_Def not in ns1.getDomainClientPorts_Dec.__bases__:
                bases = list(ns1.getDomainClientPorts_Dec.__bases__)
                bases.insert(0, ns1.getDomainClientPorts_Def)
                ns1.getDomainClientPorts_Dec.__bases__ = tuple(bases)

            ns1.getDomainClientPorts_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDomainClientPorts_Dec_Holder"

    class getDomainClientPortsResponse_Dec(ElementDeclaration):
        literal = "getDomainClientPortsResponse"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","getDomainClientPortsResponse")
            kw["aname"] = "_getDomainClientPortsResponse"
            if ns1.getDomainClientPortsResponse_Def not in ns1.getDomainClientPortsResponse_Dec.__bases__:
                bases = list(ns1.getDomainClientPortsResponse_Dec.__bases__)
                bases.insert(0, ns1.getDomainClientPortsResponse_Def)
                ns1.getDomainClientPortsResponse_Dec.__bases__ = tuple(bases)

            ns1.getDomainClientPortsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getDomainClientPortsResponse_Dec_Holder"

    class submitService_Dec(ElementDeclaration):
        literal = "submitService"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","submitService")
            kw["aname"] = "_submitService"
            if ns1.submitService_Def not in ns1.submitService_Dec.__bases__:
                bases = list(ns1.submitService_Dec.__bases__)
                bases.insert(0, ns1.submitService_Def)
                ns1.submitService_Dec.__bases__ = tuple(bases)

            ns1.submitService_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "submitService_Dec_Holder"

    class submitServiceResponse_Dec(ElementDeclaration):
        literal = "submitServiceResponse"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","submitServiceResponse")
            kw["aname"] = "_submitServiceResponse"
            if ns1.submitServiceResponse_Def not in ns1.submitServiceResponse_Dec.__bases__:
                bases = list(ns1.submitServiceResponse_Dec.__bases__)
                bases.insert(0, ns1.submitServiceResponse_Def)
                ns1.submitServiceResponse_Dec.__bases__ = tuple(bases)

            ns1.submitServiceResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "submitServiceResponse_Dec_Holder"

    class modifyReservation_Dec(ElementDeclaration):
        literal = "modifyReservation"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","modifyReservation")
            kw["aname"] = "_modifyReservation"
            if ns1.modifyReservation_Def not in ns1.modifyReservation_Dec.__bases__:
                bases = list(ns1.modifyReservation_Dec.__bases__)
                bases.insert(0, ns1.modifyReservation_Def)
                ns1.modifyReservation_Dec.__bases__ = tuple(bases)

            ns1.modifyReservation_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyReservation_Dec_Holder"

    class modifyReservationResponse_Dec(ElementDeclaration):
        literal = "modifyReservationResponse"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","modifyReservationResponse")
            kw["aname"] = "_modifyReservationResponse"
            if ns1.modifyReservationResponse_Def not in ns1.modifyReservationResponse_Dec.__bases__:
                bases = list(ns1.modifyReservationResponse_Dec.__bases__)
                bases.insert(0, ns1.modifyReservationResponse_Def)
                ns1.modifyReservationResponse_Dec.__bases__ = tuple(bases)

            ns1.modifyReservationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "modifyReservationResponse_Dec_Holder"

    class getAllClientPorts_Dec(ElementDeclaration):
        literal = "getAllClientPorts"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","getAllClientPorts")
            kw["aname"] = "_getAllClientPorts"
            if ns1.getAllClientPorts_Def not in ns1.getAllClientPorts_Dec.__bases__:
                bases = list(ns1.getAllClientPorts_Dec.__bases__)
                bases.insert(0, ns1.getAllClientPorts_Def)
                ns1.getAllClientPorts_Dec.__bases__ = tuple(bases)

            ns1.getAllClientPorts_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAllClientPorts_Dec_Holder"

    class getAllClientPortsResponse_Dec(ElementDeclaration):
        literal = "getAllClientPortsResponse"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","getAllClientPortsResponse")
            kw["aname"] = "_getAllClientPortsResponse"
            if ns1.getAllClientPortsResponse_Def not in ns1.getAllClientPortsResponse_Dec.__bases__:
                bases = list(ns1.getAllClientPortsResponse_Dec.__bases__)
                bases.insert(0, ns1.getAllClientPortsResponse_Def)
                ns1.getAllClientPortsResponse_Dec.__bases__ = tuple(bases)

            ns1.getAllClientPortsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getAllClientPortsResponse_Dec_Holder"

    class cancelService_Dec(ElementDeclaration):
        literal = "cancelService"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","cancelService")
            kw["aname"] = "_cancelService"
            if ns1.cancelService_Def not in ns1.cancelService_Dec.__bases__:
                bases = list(ns1.cancelService_Dec.__bases__)
                bases.insert(0, ns1.cancelService_Def)
                ns1.cancelService_Dec.__bases__ = tuple(bases)

            ns1.cancelService_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "cancelService_Dec_Holder"

    class cancelServiceResponse_Dec(ElementDeclaration):
        literal = "cancelServiceResponse"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","cancelServiceResponse")
            kw["aname"] = "_cancelServiceResponse"
            if ns1.cancelServiceResponse_Def not in ns1.cancelServiceResponse_Dec.__bases__:
                bases = list(ns1.cancelServiceResponse_Dec.__bases__)
                bases.insert(0, ns1.cancelServiceResponse_Def)
                ns1.cancelServiceResponse_Dec.__bases__ = tuple(bases)

            ns1.cancelServiceResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "cancelServiceResponse_Dec_Holder"

    class queryService_Dec(ElementDeclaration):
        literal = "queryService"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","queryService")
            kw["aname"] = "_queryService"
            if ns1.queryService_Def not in ns1.queryService_Dec.__bases__:
                bases = list(ns1.queryService_Dec.__bases__)
                bases.insert(0, ns1.queryService_Def)
                ns1.queryService_Dec.__bases__ = tuple(bases)

            ns1.queryService_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryService_Dec_Holder"

    class queryServiceResponse_Dec(ElementDeclaration):
        literal = "queryServiceResponse"
        schema = "http://useraccesspoint.jra3.geant2.net/"
        def __init__(self, **kw):
            kw["pname"] = ("http://useraccesspoint.jra3.geant2.net/","queryServiceResponse")
            kw["aname"] = "_queryServiceResponse"
            if ns1.queryServiceResponse_Def not in ns1.queryServiceResponse_Dec.__bases__:
                bases = list(ns1.queryServiceResponse_Dec.__bases__)
                bases.insert(0, ns1.queryServiceResponse_Def)
                ns1.queryServiceResponse_Dec.__bases__ = tuple(bases)

            ns1.queryServiceResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "queryServiceResponse_Dec_Holder"

# end class ns1 (tns: http://useraccesspoint.jra3.geant2.net/)
